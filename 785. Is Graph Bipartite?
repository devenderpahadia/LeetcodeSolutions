class Solution {
public:
    
    bool dfs(int node,vector<int>adj[],vector<int>&color)
    {
        if(color[node]==-1) color[node]=1;
        for(auto it : adj[node])
        {
            if(color[it]==-1)
            {
                color[it] = (1-color[node]);
                if(!dfs(it,adj,color)) return false;
            }
            else if(color[it]==color[node])
            {
                return false;
            }       
        }
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& graph) 
    {
        bool res;
        int v=graph.size();
        vector<int>adj[v];
        
        for(int i=0;i<v;i++)
        {
            for(int j=0;j<graph[i].size();j++)
            {
                adj[i].push_back(graph[i][j]);
            }
        }
        vector<int>color(v,-1);
        for(int i=0;i<v;i++)
        {
            if(color[i]==-1)
            {
                if(!dfs(i,adj,color))
                    return false;
            }
        }
        return true;   
    }
};
