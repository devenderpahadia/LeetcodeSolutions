class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) 
    {
        unordered_set<string>st;
        int flag=0;
        for(int i=0;i<wordList.size();i++)
        {
            if(endWord==wordList[i])
            {
                flag=1;
            }
            st.insert(wordList[i]);
        }
        if(flag==0)
            return 0;
        
        queue<string>q;
        q.push(beginWord);
        int depth=0;
        while(!q.empty())
        {
            depth+=1;
            int sz = q.size();
            while(sz--)
            {
                string curr = q.front();
                q.pop();
                for(int i=0;i<curr.size();i++)
                {
                    string temp=curr;
                    for(char c = 'a' ;c<='z';c++)
                    {
                        temp[i]=c;
                        if(curr.compare(temp)==0)
                            continue;
                        if(temp.compare(endWord)==0)
                        {
                            return depth+1;
                        }
                        if(st.find(temp)!=st.end())
                        {
                            q.push(temp);
                            st.erase(temp);
                        }
                    }
                }
            }
        }
        return 0;
    }
};
