class Solution {
public:
    unordered_map<string,vector<string>>mp;
    set<string>vis;
    
    void dfs(string &str,vector<string>&temp)
    {
        vis.insert(str);
        temp.push_back(str);
        for(auto it : mp[str])
        {
            if(vis.find(it)==vis.end())
            {
                dfs(it,temp);
            }
        }
    }
    vector<vector<string>> accountsMerge(vector<vector<string>>& acc) 
    {
        vector<vector<string>>res;
        for(int i=0;i<acc.size();i++)
        {
            for(int j=2;j<acc[i].size();j++)
            {
                mp[acc[i][j]].push_back(acc[i][j-1]);
                mp[acc[i][j-1]].push_back(acc[i][j]);
            }
        }
        for(int i=0;i<acc.size();i++)
        {
            for(int j=1;j<acc[i].size();j++)
            {
                if(vis.find(acc[i][j])==vis.end())
                {
                    vector<string>temp;
                    temp.push_back(acc[i][0]);
                    dfs(acc[i][j],temp);
                    sort(temp.begin()+1,temp.end());
                    res.push_back(temp);
                }
            }
        }
        return res;
    }
};
